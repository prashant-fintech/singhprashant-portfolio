{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `blog/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the post\",\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      description: \"The date of the post\",\r\n      required: true,\r\n    },\r\n    excerpt: {\r\n      type: \"string\",\r\n      description: \"The excerpt of the post\",\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n      description: \"Tags for the post\",\r\n      default: [],\r\n    },\r\n    draft: {\r\n      type: \"boolean\",\r\n      description: \"Whether the post is a draft\",\r\n      default: false,\r\n    },\r\n    cover: {\r\n      type: \"string\",\r\n      description: \"Cover image for the post\",\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (post) => `/blog/${post._raw.flattenedPath.replace(\"blog/\", \"\")}`,\r\n    },\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (post) => post._raw.flattenedPath.replace(\"blog/\", \"\"),\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Project = defineDocumentType(() => ({\r\n  name: \"Project\",\r\n  filePathPattern: `projects/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the project\",\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      description: \"The date of the project\",\r\n      required: true,\r\n    },\r\n    excerpt: {\r\n      type: \"string\",\r\n      description: \"The excerpt of the project\",\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n      description: \"Technologies used in the project\",\r\n      default: [],\r\n    },\r\n    cover: {\r\n      type: \"string\",\r\n      description: \"Cover image for the project\",\r\n      required: false,\r\n    },\r\n    demo: {\r\n      type: \"string\",\r\n      description: \"Demo URL for the project\",\r\n      required: false,\r\n    },\r\n    repo: {\r\n      type: \"string\",\r\n      description: \"Repository URL for the project\",\r\n      required: false,\r\n    },\r\n    featured: {\r\n      type: \"boolean\",\r\n      description: \"Whether the project is featured\",\r\n      default: false,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (project) => `/projects/${project._raw.flattenedPath.replace(\"projects/\", \"\")}`,\r\n    },\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (project) => project._raw.flattenedPath.replace(\"projects/\", \"\"),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Post, Project],\r\n  disableImportAliasWarning: true,\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: {\r\n            dark: \"github-dark\",\r\n            light: \"github-light\",\r\n          },\r\n          keepBackground: false,\r\n          onVisitLine(node: { children: unknown[] }) {\r\n            // Prevent lines from collapsing in `display: grid` mode\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }];\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node: { properties: { className: string[] } }) {\r\n            node.properties.className.push(\"highlighted\");\r\n          },\r\n          onVisitHighlightedWord(node: { properties: { className?: string[] } }) {\r\n            node.properties.className = [\"word\"];\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: [\"anchor\"],\r\n            ariaLabel: \"Link to section\",\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});"],
  "mappings": "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",
  "names": []
}
